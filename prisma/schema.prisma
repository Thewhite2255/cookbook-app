generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  Authenticator         Authenticator[]
  sessions              Session[]
  twoFactorConfirmation TwoFactorConfirmation?
  recipes               Recipe[]               @relation("UserRecipes")
  likes                 Like[]
  comments              Comment[]
  Ratings               Rating[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum UserRole {
  ADMIN
  USER
}

model Recipe {
  id          String    @id @default(cuid())
  title       String
  slug        String
  description String
  ingredients String[]
  steps       String[]
  image       String?
  favorite    Boolean   @default(false)
  userId      String
  user        User      @relation(fields: [userId], references: [id], name: "UserRecipes")
  likes       Like[]    @relation("RecipeLikes") // Relation pour les likes
  comments    Comment[] @relation("RecipeComments") // Relation pour les commentaires
  ratings     Rating[]  @relation("RecipeRatings") // Relation pour les notations
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  recipeId  String
  userId    String
  recipe    Recipe   @relation(name: "RecipeLikes", fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  recipeId  String
  userId    String
  content   String
  recipe    Recipe   @relation(name: "RecipeComments", fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id        String   @id @default(cuid())
  recipeId  String
  userId    String
  value     Int
  recipe    Recipe   @relation(name: "RecipeRatings", fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
